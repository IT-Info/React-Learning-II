we should not use DOM directly, we should use state to control elements

the elements should sync with state of component.
so we created state descriptiona and count
and attached with element, element start rendering the value of state variable
but whenever we change the value of dropdown (count) it will not change on ui, because state not changed yet.

if we add value={description} then error on console will be
You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.

we should change state on change so that element should also changed
you can check console

--- state-project 1.2
Q. What is the difference b/w state & props
A. state is internal data owned by component,
props is external data owned by parent component.

so we will pass list of items to the ItemList and ItemList then display the components on page.

Q. But what if ItemList and Form component in parallel ?
A. We need to lift up the props so that props sharable between components.

e.g. We lift up items array to the App component and on add button click 
calling function onAddItem which is passed through a prop in Form component.

also pass items to ItemList component to render list items

------
State-project1.4

We need to handle 'x' button so that element should remove in the list.

Creating onRemoveItem and pass to ItemList then Pass to Item component.
onClick of 'x' button function would call and pass its id to remove

------
State-project1.5 
we want to highlight the component on click on it.
for this we should create a state in a component and update ui using setState()

but state 'itemlist' does not know which item is highlighted, If we want so,
we should add property in parent state 'itemlist' and change onclick of component's div,
using the component

------
State-project1.6
We will move components into seperate files.

create each file name as component and export 
export can be of two types

 - default export
   export default function Component(){ . . }
   to use:
    import Component from './Component'
 - named export
    export function Component(){ . . .}
    to use:
     import { Component } from './Component'