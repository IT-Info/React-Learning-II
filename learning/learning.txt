-- Step 2 

Components, Props, and JSX


index.js : is the main file, webpack(module bundler) expects entry point, (file named with index.js)

Components : 
> are the building blocks
> contains its own data logic and appearance (how it looks and works)

Component : is a function, 
1. name starts with CAPITAL LETTER.
2. return component to be render on web page.
3. can be nested
5. must return only one component. 

index.js
---------
import React from "react";
import ReactDOM from "react-dom/client";

function App() {
  return <h1> First App</h1>;
}

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(<App />);


before React v18
import ReactDOM from "react-dom";
. . .
React.render(<App/>, document.getElementById("root"));

-- 
StrictMode : render components in order to find bugs and also react will check if you are using outdated parts of the react api.

wrapping <App/> component into <React.StrictMode> <App/> </React.StrictMode>

<React.StrictMode> 
    <App/> 
</React.StrictMode>

----------------
Step 2.1
Create a 'toy' component and reuse it in main component.

<h1> First App2</h1> <toy />
ERROR : You can not return more then one component.

NOTE : Only one component can be returned.
You should wrap inside another compoent and return that component.

even after every correction 
page would not display 'toy' component because it's not starts with Capital Letter
rename 'toy' with 'Toy'


You can create nested components 
function App() {
  function Toy() {
    return <div>toy</div>;
  }
  return (
    <div>
      <h1> First App2</h1>
      <Toy />
      <Toy />
    </div>
  );
}

NOTE : it's not a best practice.
Create components at global level so that it can reuse.