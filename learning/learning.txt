-- Step 2 

Components, Props, and JSX


index.js : is the main file, webpack(module bundler) expects entry point, (file named with index.js)

Components : 
> are the building blocks
> contains its own data logic and appearance (how it looks and works)

Component : is a function, 
1. name starts with CAPITAL LETTER.
2. return component to be render on web page.
3. can be nested
5. must return only one component. 

index.js
---------
import React from "react";
import ReactDOM from "react-dom/client";

function App() {
  return <h1> First App</h1>;
}

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(<App />);


before React v18
import ReactDOM from "react-dom";
. . .
React.render(<App/>, document.getElementById("root"));

-- 
StrictMode : render components in order to find bugs and also react will check if you are using outdated parts of the react api.

wrapping <App/> component into <React.StrictMode> <App/> </React.StrictMode>

<React.StrictMode> 
    <App/> 
</React.StrictMode>

----------------
Step 2.1
Create a 'toy' component and reuse it in main component.

<h1> First App2</h1> <toy />
ERROR : You can not return more then one component.

NOTE : Only one component can be returned.
You should wrap inside another compoent and return that component.

even after every correction 
page would not display 'toy' component because it's not starts with Capital Letter
rename 'toy' with 'Toy'


You can create nested components 
function App() {
  function Toy() {
    return <div>toy</div>;
  }
  return (
    <div>
      <h1> First App2</h1>
      <Toy />
      <Toy />
    </div>
  );
}

NOTE : it's not a best practice.
Create components at global level so that it can reuse.


So Till Now we have written JSX 
Now We should know what is JSX ?
what its
Component (data, logic, appearance)

Declarative syntax to describe what components look like and how they work
components must return a block of jsx

we can write html elements, javascript, HTML also other components
this is just because of jsx, Jsx is extention of javascript

Q. if react is javascript framework how its understand html looking code ?
A. Jsx is extention of javascript, jsx converted to React code using babel,
automatically include in create-react-app. 

<h1> Hello </h1>
converted to 
React.createElement("h1",null,"Hello React");
converted to 
HTML in browser.

so we could use React without JSX.


JSX is declarative ?

imperative : how to do things written in javascript manually

declarative : how ui should look like baed on current data.

React is an abstraction away from DOM, we never touch the DOM
We think of the UI as a reflection of the current data.
 
 Step 2.2 ------

 Page displaying more toys with name, price.

 we can use nested components with the help of jsx.

 <Menu>
    <Toy/>
    <Toy/>
 </Menu>

Seperation of concerns
html, css, javascript seperated in different files, 
but in component, js, css and html together in one file.
here is logical seperation of concerns.


----
Step 2.3

Styling in components

inline styling - 
    <component style={ json } />
    json should contain camelcaseproperties
    e.g.  
    css : font-size, text-transform
    jsx-json = fontSize, textTransform

external styling - 
    file.css - contains CSS

    .container {
        font-size : 10x;
    }

    import "./file.css"
    <Component className='container'>

-----------------------------------------------------------------------

42. Step 3  Props
--------------
is used to pass data from parent to child component.

you can pass diferent props in a component and 
in the component on parameter of the function contains all props in json.
 <Toy name="duck" price="100" />

function Toy(props){
    console.log(props); // { name: "duck", price: "100" }
    . . .
}

43. Step 3.2  

 - props are json object coming from parent component
 - is used to configure components.
 - with props, parent component control how child component look and work
 - anything can be passed as props: single value, arrays, objects, functions even other components.

In the component props used to look and work
in other words
props coming from parent so can only be updated by the parent component.

 - props are read-only, they are immutable, This is one of React's strict rules.

NOTE : if you want to change data by component's logic then we use state.
state is internal data can be updated by compoennt's logic.

 - if you need to mutate props, you actually need state.

WHY ? 
props is json object created by outside if you have reference of an object 
and change that object's properties then actual object is changed so it is
changed for parent also.
so components have to be pure functions in terms of props and state

So Component should never mutate any data that is outside of function's scope
e.g. : should not do this.
let x = 7;
function Component(){
    x = 2;
    return <h1>{x}</h1>;
}

 - One-way data flow.

 It's only pass from parent to child.

 Data can flow from parent to children not opposite way.
 but angular has two-way data flow.

 this is why easy to debug, as we have controler over the data.

Step 3.3  Project ------
 you should do one project that uses props, styling

---------------------------------------------------
45. JSX Rules

 - JSX works like HTML but we enter javascript mode by using {}
  {} must return anything.
 - place javascript expression inside {}, ref variables, create array object, [].map, ternaryoperator anything.
 - statements are not allowed (if/else, for, switch), only statements that return something. 
 - JSX produces a Javascript expression
jsx        :  <h1>hello</h1>
javascript :  React.createElement("h1",null,"hello");

 because jsx produced expression, so it can be used anywhere.
 e.g. if/else, assign to a variable, pass to a functions

 - jsx can only have one root element, 
if you need more you should use <React.Fragment> or <>

Difference
JSX         |   HTML    
className   |   class
htmlFor     |   for
all event handlers other than properties need to be camelCased:
onClick, onBlur
CSS : {{<style props in json with camelCase properties >}}
comments need to be in {} (because they are JS)

-------------------------------------------------------



